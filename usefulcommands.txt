The following document explains how to start using the API, and some of the
names of the things we need.

puuid = unique global ID for each player ['https://<region>.api.riotgames.com/lol/summoner/v4/summoners/by-name/<name>?api_key=']
queue id = gamemode played [List of all queueIDs 'https://static.developer.riotgames.com/docs/lol/queues.json']
match id = you get this using an API call 

For european routing use 'https://euw1.api.riotgames.com' followed by the API call

sometimes you may need to use ''https://europe.api.riotgames.com'

---API CALLS---

Get the puuid of a user:
    general - https://<region>.api.riotgames.com/lol/summoner/v4/summoners/by-name/<name>?api_key=
    example - https://euw1.api.riotgames.com/lol/summoner/v4/summoners/by-name/VexedOwl?api_key=[]

    Example puuid:
    S01KLVfg1APQYb5xtEoU7QcyKmlpxluPNatYIQE4wmWsallXAw0WBldrlXYMYwrug5PypPYmGtUBjA

get the match ids of a user by puuid:
    general - https://europe.api.riotgames.com/lol/match/v5/matches/by-puuid/{puuid}/ids?api_key=
    example - https://europe.api.riotgames.com/lol/match/v5/matches/by-puuid/S01KLVfg1APQYb5xtEoU7QcyKmlpxluPNatYIQE4wmWsallXAw0WBldrlXYMYwrug5PypPYmGtUBjA/ids?api_key=RGAPI-ae3f51f8-1636-4c4a-b00d-33d4e93a5444

    Example Match IDs:
    ["EUW1_6140549247","EUW1_6140508789","EUW1_6140443303",
    "EUW1_6140398215","EUW1_6139748542","EUW1_6138178509",
    "EUW1_6137540334","EUW1_6137476626","EUW1_6137357241",
    "EUW1_6133748613","EUW1_6133657848","EUW1_6133616275",
    "EUW1_6133684976","EUW1_6133654060","EUW1_6133334407",
    "EUW1_6133269163","EUW1_6131919904","EUW1_6131898743",
    "EUW1_6131856532","EUW1_6131894126"]

get the match data using match id:
    general - https://europe.api.riotgames.com/lol/match/v5/matches/{match_id}?api_key=
    example - https://europe.api.riotgames.com/lol/match/v5/matches/EUW1_6140549247?api_key=RGAPI-ae3f51f8-1636-4c4a-b00d-33d4e93a5444


---DATA---
The following is data we will use/consider for the evaluation

Game data:
    Our goal is to determine what could be useful in section 3.


    1. MetaData

        -Participants: list of puuids for all Participants


    2. Match info

        - *ENSURE "gamemode": CLASSIC for matches*
        - "gameDuration": X seconds
        - participants: all performance data for all participants, in the order of their ids from the MetaData above.

    3. Participants data
        participant data is split into general stuff, and then there is a challenges section

        Challenges:

        General Data:
            -"teamPosition" === "TOP","JUNGLE","MIDDLE","BOTTOM","UTILITY"




---TESTING CODE---

   ###CODE TO TEST DEPTH 0 DATA ACCUMULATION
# with open('test.json', 'r') as f:
#   match_data = json.load(f)
# other_participant_IDs = []
# player_data_Accumulator = []
# for match in match_data:
#         #ensure we are looking at correct gamemode
#         if(match["info"]["gameMode"]=="CLASSIC"):
#             #Particpants to recursively examine later, remove the current player to prevent duplicates
#             other_participant_IDs+= (match["metadata"]["participants"])
#             other_participant_IDs.remove(player_ID)
#             #Call extractPlayerData on each of the 10 participants in the current match
#             for player_data in match["info"]["participants"]:
#                 extractPlayerData(player_data, player_data_Accumulator)
# print(len(player_data_Accumulator))
# #store for testing
# with open("./finalOutputDepth1.json", "w") as fp:
#         json.dump( player_data_Accumulator, fp, indent=4)



   
#get data to csv format

import json
import pandas as pd

with open('ML_League_Data_d1.json', 'r') as f:
  df = pd.read_json(f)

df.to_csv('test.csv', index=False)

